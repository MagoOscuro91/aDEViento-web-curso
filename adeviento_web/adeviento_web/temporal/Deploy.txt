                                    Deploy

1 En el fichero gitignore añadimos .venv para no subir a github el entorno virtual y demas cosas.

2 Vamos a subir a github el proyecto para que vercel coja la carpeta "public" de nuestra web estatica sin backend.

3 Pero antes ejecutaremos "reflex export --frontend-only" que nos dara un archivo comprimido lo descomprimimos "unzip archivo.zip" (linux).

4 Nombramos la carpeta como "public" y borramos el zip rm -f archivo.zip (linux).

5 Todo esto lo vamos a crear en un ejecutable para automatizar el proceso de produccion.
Creamos un archivo al lado del gitignore con el nombre build.sh (linux) build.bat(windows).

Los comandos para linux son los siguientes:
*source .venv/bin/activate | Activamos el entorno virtual. 
*pip install --upgrade pip | Aactualizamos el gestor de paquetes pip.
*pip install -r requirements.txt | Instalamos los requerimientos.
*reflex init | Iniciamos reflex para que genere todo de nuevo.
*reflex export --frontend-only | En este caso exportamos solo el frontend.
*rm -fr public | Borramos la carpeta public si es que existe.
*unzip frontend.zip -d public | Descomprimimos el zip con el nombre public.
*rm -f frontend.zip | Borramos el archivo.zip generado.
*deactivate | Desactivamos el entorno virtual.

Para lanzar la build "sh build.sh" (comprobar si es "sh /build.sh").

Los comandos para windows son los siguientes:
*call .venv\Scripts\Activate | Activamos el entorno virtual.
*pip install --upgrade pip | Aactualizamos el gestor de paquetes pip.
*pip install -r requirements.txt | Instalamos los requerimientos.
*reflex init | Iniciamos reflex para que genere todo de nuevo.
*reflex export --frontend-only | En este caso exportamos solo el frontend.
*rmdir /s /q public | Borramos la carpeta public si es que existe.
*powershell Expand-Archive -Path frontend.zip -DestinationPath public | Descomprimimos el zip con el nombre public.
*del /f frontend.zip | Borramos el archivo.zip generado.
*call .venv\Scripts\Deactivate | Desactivamos el entorno virtual.

Para lanzar la build ".\/build.bat".

6 Despues de lanzar esta build y que todo a ido correctamente actualizamos o subimos el repo (GitHub).

Para subir el repositorio (curso de github):
Lo primero es instalar git arbimos desde la busqueda windows cmd y con "git --version" veremos la version.
Si tenemos la version correcta tenemos que dar un email y un nombre desde la ruta C:\Users\jonan en mi caso.
*git config --global user.name "Jonathan" | Nombre.
*git config --global user.email "Jonathan@gmail.com" | Email.
Creamos la carpeta del repo con esta convencion Este-es-mi-nuevo-repo y escribimos cmd en la ruta para abrirla desde la terminal.
*git init. | Para iniciar git en la carpeta (se crea la carpeta oculta .git).
*code . | Abrimos en vscode pero en este caso no lo aremos.
*git status | Para ver el estado (si emos modificado algo tendremos que añadirlo).
*git add . | Para agregar todos los archivos ("git add index.html" para un archivo).
*git commit -m "Mensje de progreso" | Actualizamos con un mensaje el progreso.
*git status | Para ver el estado ((6:30)si es tree clean ya podemos hacer un push).
(11:30)Creamos nuestra cuenta de GitHub si no la tenemosy vamos a repositorios.
Creamos un nuevo repo con el nombre privado o publico en este caso publico.
En la pantalla despues de crear el repo nos daran el link para conectar el repo local con el repo remoto.
*git remote add origin https://github.com/MagoOscuro91/aDEViento-web-curso.git | git add remote origin "linkremoto".
*git push origin master | Para subir el repo (la rama master).
Si tenemos algun error es posible que tengamos que logearnos desde la terminal otra vez.

Para Actualizar el repositorio:
*git status | para ver el estado del repositorio.
*git add . | Para añadir todo lo que se modifico.
*git commit -m "Mensaje de la actualizacion" | Actualizamos los cambios con un mensaje.
*git status | Otra vez para ver el estado.
*git push origin master | Para subir a GitHub.

7 La carpeta public es la que queremos desplegar en vercel https://vercel.com/ .
Para desplegar en vercel entramos y nos creamos una cuenta yo lo e echo con mi github.
Añadimos nuevo proyecto conectados con github.
Instalamos la aplicacion de vercel en github dando los permisos necesarios a nuestro proyecto.
Lo importamos y damos un nombre al proyecto de vercel.
Root Directory pinchamos y decimos lo que queremos desplegar en este caso public.
Si tubieramos variables de entorno podriamos configurarlas y mucho mas para otro curso de vercel.
Desplegamos! Congratulations!! ya podemos entrar al link de nuestra web.
Podemos modificar el dominio una vista previa etc pero continuamos al panel.
En github tenemos a la derecha Deployments donde tenemos el historial de desplegues.

8 Para realizar cambios actualizamos el repo primero con la build lanzada.
*git status | para ver el estado del repositorio.
*git add . | Para añadir todo lo que se modifico.
*git commit -m "Mensaje de la actualizacion" | Actualizamos los cambios con un mensaje.
*git status | Otra vez para ver el estado.
*git push origin master | Para subir a GitHub.
Una vez actualizado el repo vercel deveria realizar otro delpoy que se refleja 
en el historial deploiments del repo y nuestro proyecto en vercel.
Cada push en main vercel actualiza la web.

9 Para cambiar el dominio entramos en settings domains y añadimos el dominio custom.
Nos dara instrucciones de como montar esto en nuestro propio dnss pinchamos en add con la 1ª opcion.
Ahora tenemos que configurar nuestro dnss para que apunte a nuestra web en la pagina de nuestro proveedor.
Creamos el registro de tipo A apuntando a "" y si ya esiste lo borramos todo.
Type: A-Address.record, Host: @, Answer: 76.76.21.21, TTL: 600 (el que este por defecto).
Creamos el registro de tipo CNAME apuntando a "" esto tarda asta 24h en algunos casos.
Type: CNAME-Canonical name record, Host: www, Answer: cnmae.vercel-dns.com, TTL: 600 (defecto).
Una vez termine el proceso ya tendriamos nuestra pagina en nuestro dominio custom.
